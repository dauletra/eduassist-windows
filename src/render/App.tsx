import { useState, useEffect, useMemo, useCallback } from 'react';
// import reactLogo from './assets/react.svg'
// import { MessageSquare } from 'lucide-react';
import type { SelectedGroup, Lesson, Class } from './types';
import './App.css';
import TabBar from './components/TabBar';
import VoiceAssistant from './components/VoiceAssistant';
import Sidebar from './components/Sidebar';

const EduAssist = () => {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [appData, setAppData] = useState<Class[] | null>(null);
  const [selectedGroupIds, setSelectedGroupIds] = useState<{classId: string; groupId: string} | null>(null);
  const [currentLesson, setCurrentLesson] = useState<Lesson | null>(null);
  const [allLessons, setAllLessons] = useState<Lesson[]>([]);
  const [error, setError] = useState<string | null>(null);

  const selectedGroup = useMemo((): SelectedGroup | null => {
    if (!selectedGroupIds || !appData) return null;

    const cls = appData.find(c => c.id === selectedGroupIds.classId);
    if (!cls) return null;

    const group = cls?.groups.find(g => g.id === selectedGroupIds.groupId);
    if (!group) return null;

    return cls && group ? {
      classId: cls.id,
      className: cls.name,
      groupId: group.id,
      groupName: group.name,
    } : null;
  }, [selectedGroupIds, appData])

  const groupData = useMemo(() => {
    if (!selectedGroupIds || !appData) return null;

    const cls = appData.find(c => c.id === selectedGroupIds.classId);
    const group = cls?.groups.find(g => g.id === selectedGroupIds.groupId);

    return group || null;
  }, [selectedGroupIds, appData]);

  const loading = appData === null;

  const getStudentName = useCallback((studentId: string): string => {
    if (!appData || !selectedGroupIds) return studentId;

    const cls = appData.find(c => c.id === selectedGroupIds.classId);
    const group = cls?.groups.find(g => g.id === selectedGroupIds.groupId);
    const student = group?.students.find(s => s.id === studentId);

    return student?.name || studentId;  // s001 -> "–ê–∫–º–∞—Ä–∞–ª –ê."
  }, [appData, selectedGroupIds])

  const loadCurrentLesson = useCallback(async () => {
    if (!selectedGroupIds) {
      setCurrentLesson(null);
      setAllLessons([]);
      return;
    }

    try {
      setError(null);

      const lessons = await window.electronAPI.getAllLessons(selectedGroupIds.classId, selectedGroupIds.groupId);
      setAllLessons(lessons);

      let lesson = await window.electronAPI.getTodayLesson(selectedGroupIds.classId, selectedGroupIds.groupId);
      if (!lesson) {
        lesson = await window.electronAPI.createLesson(selectedGroupIds.classId, selectedGroupIds.groupId, '–£—Ä–æ–∫ —Ñ–∏–∑–∏–∫–∏. –¢–µ–º–∞');
        setAllLessons(prev => [...prev, lesson]);
      }
      setCurrentLesson(lesson);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞: ", error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      setCurrentLesson(null);
      setAllLessons([]);
    }
  }, [selectedGroupIds])

  // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
  const handleUpdateGrade = useCallback(async (lessonId: string, studentId: string, grade: number | null) => {
    if (!currentLesson || currentLesson.id !== lessonId) return;

    const previousLesson = currentLesson;

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
    setCurrentLesson(prev => {
      if (!prev) return prev;

      return {
        ...prev,
        students: prev.students.map(student =>
          student.id === studentId
            ? { ...student, grade }
            : student
        )
      };
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
      await window.electronAPI.updateGrade(lessonId, studentId, grade);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É');
      setCurrentLesson(previousLesson);
    }
  }, [currentLesson]);

  // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
  const handleUpdateAttendance = useCallback(async (lessonId: string, studentId: string, attendance: boolean) => {
    if (!currentLesson || currentLesson.id !== lessonId) return;

    const previousLesson = currentLesson;

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
    setCurrentLesson(prev => {
      if (!prev) return prev;

      return {
        ...prev,
        students: prev.students.map(student =>
          student.id === studentId
            ? { ...student, attendance }
            : student
        )
      };
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
      await window.electronAPI.updateAttendance(lessonId, studentId, attendance);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å')
      setCurrentLesson(previousLesson);
    }
  }, [currentLesson]);


  // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
  useEffect(() => {
    loadCurrentLesson();
  }, [loadCurrentLesson]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadClassData();

    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const handleSettingsUpdate = () => {
      console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      loadClassData();
    }

    window.electronAPI.onSettingsUpdated(handleSettingsUpdate);

    return () => {
      window.electronAPI.removeSettingsUpdatedListener()
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞
  const loadClassData = async () => {
    try {
      setError(null)
      const students: Class[] = await window.electronAPI.loadStudentsList();
      setAppData(students);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
      setAppData([])
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
  const handleGroupSelect = async (groupId: string) => {
    if (!appData) return;

    const cls = appData.find(c => c.groups.some(g => g.id === groupId));
    if (!cls) return;

    const group = cls.groups.find(g => g.id === groupId);
    if (!group) return;

    setSelectedGroupIds({
      classId: cls.id,
      groupId: group.id,
    });
  };

  const handleLessonChange = (lesson: Lesson) => {
    setCurrentLesson(lesson);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø
  const handleBackToGroups = () => {
    setSelectedGroupIds(null);
    setCurrentLesson(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const handleSettingsUpdate = () => {
    loadClassData();
  };

  return (
    <div className="h-screen bg-gray-50 flex overflow-hidden">

      {/*–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ*/}
      {error && (
        <div className="fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 z-50 max-w-md">
          <div className="flex items-start gap-2">
            <span className="text-xl">‚ö†Ô∏è</span>
            <div className="flex-1">
              <button
                onClick={() => setError(null)}
                className="text-sm underline mt-1 hover:text-red-800">
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="w-80 bg-white border-r flex flex-col min-h-0">
        <Sidebar
          appData={appData}
          loading={loading}
          selectedGroup={selectedGroup}
          currentLesson={currentLesson}
          allLessons={allLessons}
          getStudentName={getStudentName}
          onGroupSelect={handleGroupSelect}
          onBackToGroups={handleBackToGroups}
          onLessonChange={handleLessonChange}
          onUpdateGrade={handleUpdateGrade}
          onUpdateAttendance={handleUpdateAttendance}
          onSettingsUpdate={handleSettingsUpdate}
        />
      </div>

      <div id="contentBar" className="flex-1 flex flex-col min-h-0 overflow-hidden">

        {/* –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π */}
        <div className="bg-white flex-shrink-0">
          <VoiceAssistant />
        </div>

        {/* –¢–∞–±—ã */}
        <div className="flex-1 min-h-0 overflow-hidden">
          <TabBar
            selectedGroup={selectedGroup}
            currentLesson={currentLesson}
            groupData={groupData}
            className="h-full" />
        </div>
      </div>
    </div>
  );
};

export default EduAssist;