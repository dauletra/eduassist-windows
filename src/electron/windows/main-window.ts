// src/electron/windows/main-window.ts

import { BrowserWindow, ipcMain, app } from 'electron';
import * as path from 'path';
import { fileURLToPath } from 'url';
import { getDevUrl, isDev } from '../utils/dev-config.js'

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

let mainWindow: BrowserWindow | null = null;

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export function createMainWindow(): BrowserWindow {
  const appTitle = isDev() ? 'EduAssist - AI-Maral (dev)' : 'EduAssist - AI-Maral';

  mainWindow = new BrowserWindow({
    width: 1000,
    height: 600,
    minWidth: 800,
    minHeight: 600,
    autoHideMenuBar: true,
    titleBarStyle: 'default',
    title: appTitle,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: isDev()
        ? path.join(process.cwd(), 'src', 'electron', 'preload.cjs')
        : path.join(process.resourcesPath, 'dist-electron', 'preload.cjs'),
      webSecurity: true
    }
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  loadMainWindowContent();

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ–∫–Ω–∞
  setupMainWindowEvents();

  console.log('üöÄ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');

  return mainWindow;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
 */
function loadMainWindowContent(): void {
  if (!mainWindow) return;

  if (isDev()) {
    console.log('üì° –ó–∞–≥—Ä—É–∂–∞—é dev —Å–µ—Ä–≤–µ—Ä:', getDevUrl());
    mainWindow.loadURL(getDevUrl());
    // mainWindow.webContents.openDevTools(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    console.log('@ __dirname', __dirname);
    console.log('@ app.getAppPath()', app.getAppPath());
    console.log('@ app.getPath(userData)', app.getPath('userData'));
  } else {
    mainWindow.loadFile(path.join(app.getAppPath(), '/dist-react/index.html'));
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –æ–∫–Ω–∞
 */
function setupMainWindowEvents(): void {
  if (!mainWindow) return;

  // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞
  mainWindow.webContents.once('dom-ready', () => {
    console.log('üéØ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');

    if (isDev()) {
      mainWindow?.webContents.send('dev-mode', true);
    }
  });

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  mainWindow.on('close', (event) => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...', event);
    // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  });

  // –°–æ–±—ã—Ç–∏–µ –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ
  mainWindow.on('closed', () => {
    console.log('üëã –û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
    mainWindow = null;
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ)
  mainWindow.on('blur', () => {
    console.log('üëÅÔ∏è –û–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å');
  });

  mainWindow.on('focus', () => {
    console.log('üëÅÔ∏è –û–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å');
  });
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
export function getMainWindow(): BrowserWindow {
  if (!mainWindow) {
    throw new Error('Main window not initialized');
  }
  return mainWindow;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
export function hasMainWindow(): boolean {
  return mainWindow !== null && !mainWindow.isDestroyed();
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
export function closeMainWindow(): void {
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.close();
    mainWindow = null;
  }
}

/**
 * –°–≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
 */
export function minimizeMainWindow(): void {
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.minimize();
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
 */
export function sendToMainWindow(channel: string, ...args: any[]): void {
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send(channel, ...args);
  }
}

/**
 * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
 */
export function reloadMainWindow(): void {
  if (mainWindow && !mainWindow.isDestroyed()) {
    mainWindow.reload();
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å DevTools (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
 */
export function toggleDevTools(): void {
  if (mainWindow && !mainWindow.isDestroyed() && isDev()) {
    if (mainWindow.webContents.isDevToolsOpened()) {
      mainWindow.webContents.closeDevTools();
    } else {
      mainWindow.webContents.openDevTools();
    }
  }
}