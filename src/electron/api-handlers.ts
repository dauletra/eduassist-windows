import { ipcMain, shell, app } from 'electron';
import * as path from 'path';
import * as fs from 'fs';
import type { PresentationConfig, Class, Lesson } from './shared-types.js';
import {
  loadStudentsList,
  loadAppConfig,
  initializeDataStructure,
  createBackup,
  cleanupOldBackups,
  getTodayLesson,
  createLesson,
  updateAttendance,
  updateGrade,
  getStudentsByGroup,

} from './data-utils.js';

let mainWindow: Electron.BrowserWindow;
let isRecording = false;

const config = loadAppConfig();
let presentations: Record<string, PresentationConfig> = {};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
 */
export function setupElectronAPI(window: Electron.BrowserWindow) {
  mainWindow = window;

  initializeDataStructure();
  loadInitialData();

  setupVoiceHandlers();
  setupLessonHandlers();
  setupTeacherCommands();
  setupWindowControls();

  cleanupOldBackups();

  console.log('‚úÖ Electron API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function loadInitialData(): void {
  presentations = {
    '–ø–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω –Ω—å—é—Ç–æ–Ω–∞': {
      name: '–ü–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞',
      path: 'presentations/newton-first-law.pptx',
      description: '–ó–∞–∫–æ–Ω –∏–Ω–µ—Ä—Ü–∏–∏'
    },
    '–≤—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω –Ω—å—é—Ç–æ–Ω–∞': {
      name: '–í—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞',
      path: 'presentations/newton-second-law.pptx',
      description: 'F = ma'
    },
    '–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è': {
      name: '–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è',
      path: 'presentations/kinetic-energy.pptx',
      description: '–≠–Ω–µ—Ä–≥–∏—è –¥–≤–∏–∂–µ–Ω–∏—è'
    }
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
 */
function setupVoiceHandlers() {
  ipcMain.handle('start-recording', async () => {
    isRecording = true;
    mainWindow.webContents.send('recording-state-changed', true);
    return Promise.resolve();
  });

  ipcMain.handle('stop-recording', async () => {
    isRecording = false;
    mainWindow.webContents.send('recording-state-changed', false);
    return Promise.resolve();
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–∫–∞–º–∏
 */
function setupLessonHandlers() {
  // –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
  ipcMain.handle('get-today-lesson', async (event, classId: string, groupId: string): Promise<Lesson | null> => {
    return getTodayLesson(classId, groupId);
  });

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫
  ipcMain.handle('create-lesson', async (event, classId: string, groupId: string, topic: string): Promise<Lesson> => {
    return createLesson(classId, groupId, topic);
  });

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
  ipcMain.handle('update-attendance', async (event, lessonId: string, studentId: string, attendance: boolean): Promise<boolean> => {
    return updateAttendance(lessonId, studentId, attendance);
  });

  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
  ipcMain.handle('update-grade', async (event, lessonId: string, studentId: string, grade: number | null): Promise<boolean> => {
    return updateGrade(lessonId, studentId, grade);
  });
}

/**
 * –ö–æ–º–∞–Ω–¥—ã —É—á–∏—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º
 */
function setupTeacherCommands() {
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
  ipcMain.handle('load-students-list', async (): Promise<Class[]> => {
    return loadStudentsList();
  });

  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã
  ipcMain.handle('divide-students', async (event, classId: string, groupId: string, groupCount: number) => {
    const students = getStudentsByGroup(classId, groupId);
    const shuffled = [...students].sort(() => 0.5 - Math.random());
    const groups: typeof students[] = [];
    const studentsPerGroup = Math.ceil(shuffled.length / groupCount);

    for (let i = 0; i < groupCount; i++) {
      const start = i * studentsPerGroup;
      const end = start + studentsPerGroup;
      groups.push(shuffled.slice(start, end));
    }

    return groups;
  });

  // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
  ipcMain.handle('select-random-student', async (event, classId: string, groupId: string) => {
    const students = getStudentsByGroup(classId, groupId);
    return students[Math.floor(Math.random() * students.length)];
  });

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
  ipcMain.handle('open-presentation', async (event, presentationName: string) => {
    const normalizedName = presentationName.toLowerCase();
    const presentation = presentations[normalizedName];

    if (presentation) {
      try {
        await openPresentationFile(presentation);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:', error);
      }
    }

    return Promise.resolve();
  });

  // –ü–µ—á–∞—Ç—å –∑–∞–¥–∞—á
  ipcMain.handle('print-tasks', async () => {
    try {
      await generateAndPrintTasks();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –∑–∞–¥–∞—á:', error);
    }

    return Promise.resolve();
  });
}

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function setupWindowControls() {
  ipcMain.handle('minimize-window', async () => {
    mainWindow.minimize();
    return Promise.resolve();
  });

  ipcMain.handle('close-window', async () => {
    const backupPath = createBackup();
    if (backupPath) {
      console.log('üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    }

    mainWindow.close();
    return Promise.resolve();
  });
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
async function openPresentationFile(presentation: PresentationConfig): Promise<void> {
  const userDataPath = app.getPath('userData');

  const possiblePaths = [
    path.join(userDataPath, 'presentations', path.basename(presentation.path)),
    path.join(userDataPath, presentation.path),
    path.join(process.cwd(), presentation.path)
  ];

  for (const fullPath of possiblePaths) {
    if (fs.existsSync(fullPath)) {
      await shell.openPath(fullPath);
      return;
    }
  }

  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
  const fallbackHtml = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>${presentation.name}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 600px;
      margin: 50px auto;
      padding: 20px;
      background: #f0f0f0;
    }
    .container {
      background: white;
      padding: 30px;
      border-radius: 10px;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üìä ${presentation.name}</h1>
    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${presentation.description}</p>
    <p>‚ö†Ô∏è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
    <p>–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª "${path.basename(presentation.path)}" –≤ –ø–∞–ø–∫—É presentations</p>
  </div>
</body>
</html>`;

  const tempPath = path.join(app.getPath('temp'), `presentation-info-${Date.now()}.html`);
  fs.writeFileSync(tempPath, fallbackHtml, 'utf8');
  await shell.openPath(tempPath);
}

async function generateAndPrintTasks(): Promise<void> {
  const currentDate = new Date().toLocaleDateString('ru-RU');

  const tasksHtml = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>–ó–∞–¥–∞—á–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ</title>
  <style>
    body {
      font-family: 'Times New Roman', serif;
      margin: 20px;
      line-height: 1.6;
    }
    .header {
      text-align: center;
      margin-bottom: 30px;
      border-bottom: 2px solid #333;
      padding-bottom: 15px;
    }
    .task {
      margin-bottom: 30px;
      border: 1px solid #ddd;
      padding: 20px;
      background: #f9f9f9;
    }
    .task-number {
      font-weight: bold;
      font-size: 1.2em;
      margin-bottom: 15px;
    }
    .answer-space {
      border-top: 1px dashed #999;
      padding-top: 15px;
      min-height: 60px;
    }
    @media print {
      body { margin: 15mm; }
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>–ó–∞–¥–∞—á–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ</h1>
    <p><strong>–î–∞—Ç–∞:</strong> ${currentDate}</p>
  </div>
  
  <div class="task">
    <div class="task-number">–ó–∞–¥–∞—á–∞ ‚Ññ 1</div>
    <p>–¢–µ–ª–æ –º–∞—Å—Å–æ–π 2 –∫–≥ –¥–≤–∏–∂–µ—Ç—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 5 –º/—Å. –ù–∞–π–¥–∏—Ç–µ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é —Ç–µ–ª–∞.</p>
    <div class="answer-space">
      <strong>–†–µ—à–µ–Ω–∏–µ:</strong><br><br>
      <strong>–û—Ç–≤–µ—Ç:</strong> _______________
    </div>
  </div>

  <div class="task">
    <div class="task-number">–ó–∞–¥–∞—á–∞ ‚Ññ 2</div>
    <p>–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Ä–∞–∑–≥–æ–Ω—è–µ—Ç—Å—è —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º 2 –º/—Å¬≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥. –ö–∞–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–±–µ—Ä–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?</p>
    <div class="answer-space">
      <strong>–†–µ—à–µ–Ω–∏–µ:</strong><br><br>
      <strong>–û—Ç–≤–µ—Ç:</strong> _______________
    </div>
  </div>

  <script>
    window.addEventListener('load', () => {
      setTimeout(() => window.print(), 1000);
    });
  </script>
</body>
</html>`;

  const tempPath = path.join(app.getPath('temp'), `tasks-${Date.now()}.html`);
  fs.writeFileSync(tempPath, tasksHtml, 'utf8');
  await shell.openPath(tempPath);
}

export function getRecordingState(): boolean {
  return isRecording;
}