// src/electron/api/services/presentation.service.ts

import { shell, app } from 'electron';
import * as path from 'path';
import * as fs from 'fs';
import type { PresentationConfig } from '../../shared-types.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏
 */
export class PresentationService {
  private presentations: Record<string, PresentationConfig> = {};

  constructor() {
    this.loadPresentations();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
   */
  private loadPresentations(): void {
    this.presentations = {
      '–ø–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω –Ω—å—é—Ç–æ–Ω–∞': {
        name: '–ü–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞',
        path: 'presentations/newton-first-law.pptx',
        description: '–ó–∞–∫–æ–Ω –∏–Ω–µ—Ä—Ü–∏–∏'
      },
      '–≤—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω –Ω—å—é—Ç–æ–Ω–∞': {
        name: '–í—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞',
        path: 'presentations/newton-second-law.pptx',
        description: 'F = ma'
      },
      '–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è': {
        name: '–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è',
        path: 'presentations/kinetic-energy.pptx',
        description: '–≠–Ω–µ—Ä–≥–∏—è –¥–≤–∏–∂–µ–Ω–∏—è'
      }
    };
  }

  /**
   * –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏
   */
  async openPresentation(filePath: string): Promise<void> {
    try {
      const result = await shell.openPath(filePath);

      if (result) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: ${result}`);
        throw new Error(result);
      }

      console.log(`‚úÖ –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: ${filePath}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
   */
  private async openPresentationFile(presentation: PresentationConfig): Promise<void> {
    const userDataPath = app.getPath('userData');

    // –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    const possiblePaths = [
      path.join(userDataPath, 'presentations', path.basename(presentation.path)),
      path.join(userDataPath, presentation.path),
      path.join(process.cwd(), presentation.path)
    ];

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
    for (const fullPath of possiblePaths) {
      if (fs.existsSync(fullPath)) {
        await shell.openPath(fullPath);
        return;
      }
    }

    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await this.createFallbackPage(presentation);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
   */
  private async createFallbackPage(presentation: PresentationConfig): Promise<void> {
    const fallbackHtml = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>${presentation.name}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 600px;
      margin: 50px auto;
      padding: 20px;
      background: #f0f0f0;
    }
    .container {
      background: white;
      padding: 30px;
      border-radius: 10px;
      text-align: center;
    }
    h1 { color: #333; }
    p { color: #666; line-height: 1.6; }
    .warning { color: #e67e22; font-size: 1.2em; margin: 20px 0; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üìä ${presentation.name}</h1>
    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${presentation.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
    <p class="warning">‚ö†Ô∏è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
    <p>–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª "${path.basename(presentation.path)}" –≤ –ø–∞–ø–∫—É presentations</p>
  </div>
</body>
</html>`;

    const tempPath = path.join(app.getPath('temp'), `presentation-info-${Date.now()}.html`);
    fs.writeFileSync(tempPath, fallbackHtml, 'utf8');
    await shell.openPath(tempPath);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
   */
  getAllPresentations(): PresentationConfig[] {
    return Object.values(this.presentations);
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
   */
  addPresentation(key: string, presentation: PresentationConfig): void {
    this.presentations[key.toLowerCase()] = presentation;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (singleton)
export const presentationService = new PresentationService();