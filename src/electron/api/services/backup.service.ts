// src/electron/api/services/backup.service.ts

import * as fs from 'fs';
import * as path from 'path';
import { DATA_PATHS } from '../../utils/paths.js';
import { ensureDirectoryExists } from '../../utils/file-utils.js';
import { configService } from './config.service.js';
import { studentService } from './student.service.js';
import { lessonService } from './lesson.service.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export class BackupService {

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
   */
  createBackup(): string | null {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const backupDir = DATA_PATHS.backups();
      ensureDirectoryExists(backupDir);

      const backupFile = path.join(backupDir, `backup-${timestamp}.json`);

      const backupData = {
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        config: configService.loadConfig(),
        students: studentService.loadStudentsList(),
        journal: lessonService.loadJournal()
      };

      fs.writeFileSync(backupFile, JSON.stringify(backupData, null, 2), 'utf8');

      console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
      return backupFile;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
      return null;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N)
   */
  cleanupOldBackups(keepCount: number = 10): void {
    try {
      const backupDir = DATA_PATHS.backups();

      if (!fs.existsSync(backupDir)) {
        return;
      }

      const files = fs.readdirSync(backupDir)
        .filter(file => file.startsWith('backup-') && file.endsWith('.json'))
        .map(file => ({
          name: file,
          path: path.join(backupDir, file),
          stats: fs.statSync(path.join(backupDir, file))
        }))
        .sort((a, b) => b.stats.mtime.getTime() - a.stats.mtime.getTime());

      const filesToDelete = files.slice(keepCount);

      filesToDelete.forEach(file => {
        fs.unlinkSync(file.path);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${file.name}`);
      });

      if (filesToDelete.length > 0) {
        console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${filesToDelete.length} —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
   */
  listBackups(): Array<{ name: string; date: Date; size: number }> {
    try {
      const backupDir = DATA_PATHS.backups();

      if (!fs.existsSync(backupDir)) {
        return [];
      }

      return fs.readdirSync(backupDir)
        .filter(file => file.startsWith('backup-') && file.endsWith('.json'))
        .map(file => {
          const stats = fs.statSync(path.join(backupDir, file));
          return {
            name: file,
            date: stats.mtime,
            size: stats.size
          };
        })
        .sort((a, b) => b.date.getTime() - a.date.getTime());

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–ø–∏–π:', error);
      return [];
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
   */
  restoreFromBackup(backupFileName: string): boolean {
    try {
      const backupPath = path.join(DATA_PATHS.backups(), backupFileName);

      if (!fs.existsSync(backupPath)) {
        console.error('‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
      }

      const backupData = JSON.parse(fs.readFileSync(backupPath, 'utf8'));

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if (backupData.students) {
        studentService.saveStudentsList(backupData.students);
      }

      if (backupData.journal) {
        lessonService.saveJournal(backupData.journal);
      }

      if (backupData.config) {
        configService.saveConfig(backupData.config);
      }

      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑: ${backupFileName}`);
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–ø–∏–∏:', error);
      return false;
    }
  }
}

export const backupService = new BackupService();