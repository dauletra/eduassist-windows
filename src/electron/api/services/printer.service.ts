import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

export class PrinterService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ WMI
   */
  async getPrintersStatus(includeVirtual: boolean = true): Promise<Map<string, boolean>> {
    const printersStatus = new Map<string, boolean>();

    try {
      const command = `Get-WmiObject -Class Win32_Printer | Select-Object Name, PortName, WorkOffline, PrinterState | ConvertTo-Json`;

      const { stdout, stderr } = await execAsync(
        `powershell -NoProfile -NonInteractive -Command "${command}"`,
        {
          encoding: 'utf8',
          timeout: 10000,
          windowsHide: true
        }
      );

      if (stderr) {
        console.warn('‚ö†Ô∏è PowerShell stderr:', stderr);
      }

      if (!stdout || stdout.trim().length === 0) {
        console.warn('‚ö†Ô∏è WMI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
        return printersStatus;
      }

      let printers;
      try {
        printers = JSON.parse(stdout);
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
        return printersStatus;
      }

      const printerArray = Array.isArray(printers) ? printers : [printers];

      printerArray.forEach((printer: any) => {
        if (!printer.Name) return;

        const portName = printer.PortName || '';
        const isVirtual = portName.includes('PORTPROMPT:') ||
          portName.includes('nul:') ||
          portName.includes('SHRFAX:') ||
          portName.includes('Microsoft.Office') ||
          portName.includes('FILE:');

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã –µ—Å–ª–∏ includeVirtual = false
        if (!includeVirtual && isVirtual) {
          return;
        }

        let isAvailable = false;

        if (isVirtual) {
          // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
          isAvailable = true;
        } else {
          // –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã
          // –ì–ª–∞–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π: WorkOffline
          // WorkOffline === false –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω
          // PrinterState –º–æ–∂–µ—Ç –±—ã—Ç—å 0 (idle/ready) –∫–æ–≥–¥–∞ –ø—Ä–∏–Ω—Ç–µ—Ä –ø—Ä–æ—Å—Ç–æ –∂–¥–µ—Ç
          isAvailable = !printer.WorkOffline;
        }

        printersStatus.set(printer.Name, isAvailable);

  //       console.log(`üìü ${printer.Name}
  // –ü–æ—Ä—Ç: ${portName}
  // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π: ${isVirtual}
  // WorkOffline: ${printer.WorkOffline}
  // PrinterState: ${printer.PrinterState}
  // ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: ${isAvailable}`);
      });

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ WMI:', error.message);
    }

    return printersStatus;
  }
}

export const printerService = new PrinterService();