import { ipcMain } from 'electron';
import type { Class, Student } from '../../shared-types.js';
import { studentService } from '../services/student.service.js';

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
 */
export function registerStudentHandlers(): void {

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
  ipcMain.handle('load-students-list', async (): Promise<Class[]> => {
    return studentService.loadStudentsList();
  });

  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã
  ipcMain.handle('divide-students', async (_event, classId: string, groupId: string, groupCount: number) => {
    const students = studentService.getStudentsByGroup(classId, groupId);

    if (students.length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è');
      return [];
    }

    const shuffled = [...students].sort(() => 0.5 - Math.random());
    const groups: typeof students[] = [];
    const studentsPerGroup = Math.ceil(shuffled.length / groupCount);

    for (let i = 0; i < groupCount; i++) {
      const start = i * studentsPerGroup;
      const end = start + studentsPerGroup;
      groups.push(shuffled.slice(start, end));
    }

    console.log(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ ${groupCount} –≥—Ä—É–ø–ø`);
    return groups;
  });

  // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
  ipcMain.handle('select-random-student', async (_event, classId: string, groupId: string): Promise<Student | null> => {
    const students = studentService.getStudentsByGroup(classId, groupId);

    if (students.length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞');
      return null;
    }

    const selected = students[Math.floor(Math.random() * students.length)];
    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç: ${selected.name}`);
    return selected;
  });

  console.log('üë• Student handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
}