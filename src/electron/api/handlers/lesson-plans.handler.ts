// src/electron/api/handlers/lesson-plans.handler.ts
import { ipcMain, dialog } from 'electron';
import * as path from 'path';
import * as fs from 'fs/promises';
import type { ClassFolder, LessonFolder, FileItem } from '../../shared-types.js';
import { fileExists } from '../../utils/file-utils.js';
import { configService } from '../services/config.service.js'

let currentClass: string = '';

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—É—Ä–æ—á–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
 */
export function registerLessonPlansHandlers(): void {

  // –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –ø–æ—É—Ä–æ—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
  ipcMain.handle('select-lesson-plans-folder', async (): Promise<string | null> => {
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory'],
      title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø–æ—É—Ä–æ—á–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏'
    });

    return result.canceled ? null : result.filePaths[0];
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–∏ –ø–∞–ø–∫–∏ –ø–æ—É—Ä–æ—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
  ipcMain.handle('save-lesson-plans-path', async (_event, pathToSave: string): Promise<boolean> => {
    try {
      const config = configService.loadConfig();
      config.paths.lessonPlansDir = pathToSave; // –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
      configService.updateConfig(config);
      console.log(`‚úÖ –ü—É—Ç—å –∫ –ø–æ—É—Ä–æ—á–Ω—ã–º –ø–ª–∞–Ω–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${pathToSave}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏:', error);
      return false;
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
  ipcMain.handle('get-lesson-plans-path', async (): Promise<string> => {
    const config = configService.loadConfig();
    const savedPath = config.paths.lessonPlansDir || '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
    if (savedPath && !fileExists(savedPath)) {
      console.warn('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', savedPath);
      // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—É—Ç—å
      config.paths.lessonPlansDir = '';
      configService.updateConfig(config);
      return '';
    }

    return savedPath;
  });

  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ—É—Ä–æ—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
  ipcMain.handle('scan-lesson-plans', async (_event, basePath: string): Promise<ClassFolder[]> => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
      if (!fileExists(basePath)) {
        console.error('‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', basePath);
        return [];
      }

      const classes: ClassFolder[] = [];
      const entries = await fs.readdir(basePath, { withFileTypes: true });

      for (const entry of entries) {
        if (entry.isDirectory()) {
          // –§–∏–ª—å—Ç—Ä –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "7 –ú–ö", "9 –ú–†", "8 –ú–ö –î–û")
          if (/^\d+\s+(–ú–ö|–ú–†|–î–û)/.test(entry.name)) {
            const classPath = path.join(basePath, entry.name);
            const lessons = await scanLessonsInClass(classPath);

            classes.push({
              name: entry.name,
              path: classPath,
              lessons: lessons
            });
          }
        }
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: ${classes.length}`);
      return classes;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏:', error);
      return [];
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
  ipcMain.handle('get-current-class', async (): Promise<string> => {
    return currentClass;
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
  ipcMain.handle('set-current-class', async (_event, className: string): Promise<boolean> => {
    try {
      currentClass = className;
      console.log(`‚úÖ –¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${className}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∞—Å—Å–∞:', error);
      return false;
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —É—Ä–æ–∫–∞
  ipcMain.handle('get-lesson-files', async (_event, lessonPath: string): Promise<FileItem[]> => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (!fileExists(lessonPath)) {
        console.warn(`‚ö†Ô∏è –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${lessonPath}`);
        return [];
      }

      const files: FileItem[] = [];
      const entries = await fs.readdir(lessonPath, { withFileTypes: true });

      for (const entry of entries) {
        const filePath = path.join(lessonPath, entry.name);

        try {
          const stats = await fs.stat(filePath);

          files.push({
            name: entry.name,
            path: filePath,
            type: entry.isDirectory() ? 'directory' : 'file',
            extension: entry.isFile() ? path.extname(entry.name) : undefined,
            size: entry.isFile() ? stats.size : undefined,
          });
        } catch (statError) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ ${entry.name}:`, statError);
        }
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã, –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      files.sort((a, b) => {
        if (a.type === 'directory' && b.type === 'file') return -1;
        if (a.type === 'file' && b.type === 'directory') return 1;
        return a.name.localeCompare(b.name, 'ru');
      });

      return files;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —É—Ä–æ–∫–∞:`, error);
      return [];
    }
  });

  console.log('üìÅ Lesson Plans handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
}

/**
 * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –≤ –ø–∞–ø–∫–µ –∫–ª–∞—Å—Å–∞
 */
async function scanLessonsInClass(classPath: string): Promise<LessonFolder[]> {
  const lessons: LessonFolder[] = [];

  try {
    const entries = await fs.readdir(classPath, { withFileTypes: true });

    for (const entry of entries) {
      if (entry.isDirectory()) {
        // –§–æ—Ä–º–∞—Ç: "X –∞–ø—Ç–∞ Y —Å–∞–±–∞“õ" –∏–ª–∏ "X –Ω–µ–¥–µ–ª—è Y —É—Ä–æ–∫" (—Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º " - –Ω–∞–∑–≤–∞–Ω–∏–µ")
        const match = entry.name.match(/^(\d+)\s+(–∞–ø—Ç–∞|–Ω–µ–¥–µ–ª—è)\s+(\d+)\s+(—Å–∞–±–∞“õ|—É—Ä–æ–∫)(?:\s*[-‚Äì]\s*(.+))?$/i);

        if (match) {
          lessons.push({
            name: entry.name,
            path: path.join(classPath, entry.name),
            week: parseInt(match[1]),
            lessonNumber: parseInt(match[3]),
            title: match[5]?.trim() || undefined
          });
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º –∏ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞
    lessons.sort((a, b) => {
      if (a.week !== b.week) return a.week - b.week;
      return a.lessonNumber - b.lessonNumber;
    });

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –≤ ${classPath}:`, error);
  }

  return lessons;
}