// src/electron/api/handlers/settings.handler.ts

import { ipcMain } from 'electron';
import type { Class, Group, Student } from '../../shared-types.js';
import { configService } from '../services/config.service.js';
import { studentService } from '../services/student.service.js';

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export function registerSettingsHandlers(): void {

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  ipcMain.handle('load-settings', async () => {
    try {
      return configService.loadConfig();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      throw error;
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  ipcMain.handle('save-settings', async (_event, settings) => {
    try {
      console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

      if (!settings) {
        throw new Error('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å undefined');
      }

      const success = configService.updateConfig(settings);

      if (success) {
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        return { success: true };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      throw error;
    }
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏
  ipcMain.handle('add-class-with-groups', async (_event, className: string, groupNames: string[]) => {
    try {
      const classes = studentService.loadStudentsList();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      if (classes.some(c => c.name.toLowerCase() === className.trim().toLowerCase())) {
        throw new Error('–ö–ª–∞—Å—Å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      const newClass: Class = {
        id: `class-${Date.now()}`,
        name: className.trim(),
        groups: groupNames.map((groupName, index) => ({
          id: `group-${Date.now()}-${index}`,
          name: groupName.trim(),
          students: [],
          conflicts: []
        }))
      };

      const success = studentService.addClass(newClass);

      if (success) {
        console.log(`‚úÖ –ö–ª–∞—Å—Å "${className}" –¥–æ–±–∞–≤–ª–µ–Ω`);
        return { success: true, class: newClass };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞:', error);
      throw error;
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
  ipcMain.handle('update-class', async (_event, classId: string, updates: Partial<Class>) => {
    try {
      const success = studentService.updateClass(classId, updates);

      if (success) {
        console.log(`‚úÖ –ö–ª–∞—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${classId}`);
        return { success: true };
      } else {
        throw new Error('–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞:', error);
      throw error;
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
  ipcMain.handle('delete-class', async (_event, classId: string) => {
    try {
      const success = studentService.deleteClass(classId);

      if (success) {
        console.log(`‚úÖ –ö–ª–∞—Å—Å —É–¥–∞–ª–µ–Ω: ${classId}`);
        return { success: true };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞:', error);
      throw error;
    }
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –∫–ª–∞—Å—Å
  ipcMain.handle('add-group-to-class', async (_event, classId: string, groupName: string) => {
    try {
      const classes = studentService.loadStudentsList();
      const cls = classes.find(c => c.id === classId);

      if (!cls) {
        throw new Error('–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const newGroup: Group = {
        id: `group-${Date.now()}`,
        name: groupName.trim(),
        students: [],
        conflicts: []
      };

      cls.groups.push(newGroup);
      const success = studentService.saveStudentsList(classes);

      if (success) {
        console.log(`‚úÖ –ì—Ä—É–ø–ø–∞ "${groupName}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–ª–∞—Å—Å`);
        return { success: true, group: newGroup };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error);
      throw error;
    }
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É
  ipcMain.handle('add-student-to-group', async (_event, classId: string, groupId: string, studentName: string) => {
    try {
      const classes = studentService.loadStudentsList();
      const cls = classes.find(c => c.id === classId);
      const group = cls?.groups.find(g => g.id === groupId);

      if (!group) {
        throw new Error('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      if (group.students.some(s => s.name.toLowerCase() === studentName.trim().toLowerCase())) {
        throw new Error('–£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥—Ä—É–ø–ø–µ');
      }

      const newStudent: Student = {
        id: `student-${Date.now()}`,
        name: studentName.trim()
      };

      group.students.push(newStudent);
      const success = studentService.saveStudentsList(classes);

      if (success) {
        console.log(`‚úÖ –£—á–µ–Ω–∏–∫ "${studentName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É`);
        return { success: true, student: newStudent };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞:', error);
      throw error;
    }
  });

  console.log('üìã Settings handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
}