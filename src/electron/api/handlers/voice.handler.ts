import { ipcMain, BrowserWindow } from 'electron';

let isRecording = false;

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
 */
export function registerVoiceHandlers(mainWindow: BrowserWindow): void {

  // –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
  ipcMain.handle('start-recording', async () => {
    isRecording = true;

    if (mainWindow && !mainWindow.isDestroyed()) {
      mainWindow.webContents.send('recording-state-changed', true);
    }

    console.log('üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞');
  });

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
  ipcMain.handle('stop-recording', async () => {
    isRecording = false;

    if (mainWindow && !mainWindow.isDestroyed()) {
      mainWindow.webContents.send('recording-state-changed', false);
    }

    console.log('üé§ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  });

  console.log('üéôÔ∏è Voice handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 */
export function getRecordingState(): boolean {
  return isRecording;
}